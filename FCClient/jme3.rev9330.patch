Index: src/core/com/jme3/util/TangentBinormalGenerator.java
===================================================================
--- src/core/com/jme3/util/TangentBinormalGenerator.java	(revision 9330)
+++ src/core/com/jme3/util/TangentBinormalGenerator.java	(working copy)
@@ -31,21 +31,31 @@
  */
 package com.jme3.util;
 
+import static com.jme3.util.BufferUtils.populateFromBuffer;
+import static com.jme3.util.BufferUtils.setInBuffer;
+
+import java.nio.Buffer;
+import java.nio.FloatBuffer;
+import java.nio.IntBuffer;
+import java.nio.ShortBuffer;
+import java.util.ArrayList;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
 import com.jme3.math.ColorRGBA;
 import com.jme3.math.FastMath;
 import com.jme3.math.Vector2f;
 import com.jme3.math.Vector3f;
-import com.jme3.scene.*;
+import com.jme3.scene.Geometry;
+import com.jme3.scene.Mesh;
+import com.jme3.scene.Mesh.Mode;
+import com.jme3.scene.Node;
+import com.jme3.scene.Spatial;
+import com.jme3.scene.VertexBuffer;
 import com.jme3.scene.VertexBuffer.Format;
 import com.jme3.scene.VertexBuffer.Type;
 import com.jme3.scene.VertexBuffer.Usage;
 import com.jme3.scene.mesh.IndexBuffer;
-import static com.jme3.util.BufferUtils.*;
-import java.nio.FloatBuffer;
-import java.nio.IntBuffer;
-import java.util.ArrayList;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 
 /**
  * 
@@ -754,4 +764,156 @@
         //lineMesh.setInterleaved();
         return lineMesh;
     }
+    
+    
+    //TR CODE
+    
+    private static interface IndexWrapper {
+        public int get(int i);
+        public short getShort(int i);
+        public int size();
+    }
+    
+    private static IndexWrapper getIndexWrapper(final Buffer buff) {
+        if (buff instanceof ShortBuffer) {
+            return new IndexWrapper() {
+                private ShortBuffer buf = (ShortBuffer) buff;
+                public int get(int i) {
+                    return ((int) buf.get(i))&(0x0000FFFF);
+                }
+                public short getShort(int i){return buf.get(i);}
+                public int size() {
+                    return buf.capacity();
+                }
+            };
+        }
+        else if (buff instanceof IntBuffer) {
+            return new IndexWrapper() {
+                private IntBuffer buf = (IntBuffer) buff;
+                public int get(int i) {
+                    return buf.get(i);
+                }
+                public int size() {
+                    return buf.capacity();
+                }
+				@Override
+				public short getShort(int i) {
+					return 0;
+				}
+            };
+        } else {
+            throw new IllegalArgumentException();
+        }
+    }
+    public static boolean generateFaceNormalsAndTangents(Mesh mesh){
+
+    	if(mesh.getMode() != Mode.Triangles)
+    		return false;
+    	
+        IndexWrapper indexBuffer =  getIndexWrapper(mesh.getBuffer(Type.Index).getData());
+        FloatBuffer vertexBuffer = (FloatBuffer) mesh.getBuffer(Type.Position).getData();
+        if (mesh.getBuffer(Type.TexCoord) == null)
+            throw new IllegalArgumentException("Can only generate tangents for "
+                                             + "meshes with texture coordinates");
+        
+        FloatBuffer textureBuffer = (FloatBuffer) mesh.getBuffer(Type.TexCoord).getData();
+        FloatBuffer tangents = BufferUtils.createFloatBuffer(vertexBuffer.capacity());
+        FloatBuffer normals = BufferUtils.createFloatBuffer(vertexBuffer.capacity());
+
+        Vector3f v1 = new Vector3f();
+        Vector3f v2 = new Vector3f();
+        Vector3f v3 = new Vector3f();
+        Vector2f t1 = new Vector2f();
+        Vector2f t2 = new Vector2f();
+        Vector2f t3 = new Vector2f();
+        for (int i = 0; i < indexBuffer.size(); i+=3) {
+            	int i1 = indexBuffer.get(i);
+                populateFromBuffer(v1, vertexBuffer, i1);
+                populateFromBuffer(t1, textureBuffer, i1);
+            	int i2 = indexBuffer.get(i+1);
+                populateFromBuffer(v2, vertexBuffer, i2);
+                populateFromBuffer(t2, textureBuffer, i2);
+            	int i3 = indexBuffer.get(i+2);
+                populateFromBuffer(v3, vertexBuffer, i3);
+                populateFromBuffer(t3, textureBuffer, i3);
+                
+                Vector3f v21 = v2.subtract(v1);
+                Vector3f v31 = v3.subtract(v1);
+                Vector2f t21 = t2.subtract(t1);
+                Vector2f t31 = t3.subtract(t1);
+                
+                Vector3f fNormal = v21.cross(v31);
+                fNormal.normalizeLocal();
+                Vector3f fTangent;
+                if(t21.y<0.000001f && t21.y>-0.000001f){
+                	if(t31.y<0.000001f && t31.y>-0.000001f){
+                		fTangent = Vector3f.UNIT_XYZ.clone();
+                    } else {
+                    	fTangent = v31.divide(t31.y);
+                    }
+                } else {
+                	fTangent = v21.divide(t21.y);
+                }
+                fTangent.normalizeLocal();
+                tangents.put(i1*3, fTangent.x);
+                tangents.put(i1*3+1, fTangent.y);
+                tangents.put(i1*3+2, fTangent.z);
+                tangents.put(i2*3, fTangent.x);
+                tangents.put(i2*3+1, fTangent.y);
+                tangents.put(i2*3+2, fTangent.z);
+                tangents.put(i3*3, fTangent.x);
+                tangents.put(i3*3+1, fTangent.y);
+                tangents.put(i3*3+2, fTangent.z);
+                normals.put(i1*3, fTangent.x);
+                normals.put(i1*3+1, fTangent.y);
+                normals.put(i1*3+2, fTangent.z);
+                normals.put(i2*3, fTangent.x);
+                normals.put(i2*3+1, fTangent.y);
+                normals.put(i2*3+2, fTangent.z);
+                normals.put(i3*3, fTangent.x);
+                normals.put(i3*3+1, fTangent.y);
+                normals.put(i3*3+2, fTangent.z);
+        }
+        mesh.clearBuffer(Type.Normal);
+        mesh.clearBuffer(Type.Tangent);
+        mesh.setBuffer(Type.Normal, 3, normals);
+        mesh.setBuffer(Type.Tangent, 3, tangents);
+        return true;
+    }
+    
+    /**
+     * Fix the normals of vertices lying on the edge of a tile to face a direction ON the edge. The result will be
+     * that two tiles corrected by this way will do not have seams on adjecant vertices.
+     * The algorithm works by moving the normal x and z values to 0 if the vertex is on the corresponding border.
+     * @param mesh				The mesh, normals should be fixed
+     * @param borderDistance	The distance from the center to one border, asuming all 4 borders at same distance
+     * @param borderTolerance	The positive tolerance value for checks if a vertex is on the border. Anything vertex within that distance to a border will be fixed.
+     */
+    public static void fixTileNormals(Mesh mesh, float borderDistance, float borderTolerance){
+        FloatBuffer vertexBuffer = (FloatBuffer) mesh.getBuffer(Type.Position).getData();
+        FloatBuffer normalBuffer = (FloatBuffer) mesh.getBuffer(Type.Normal).getData();
+        FloatBuffer normals = BufferUtils.createFloatBuffer(vertexBuffer.capacity());
+        Vector3f v = new Vector3f();
+        Vector3f n = new Vector3f();
+        //just loop over all values, whatever type it is, a vertex has its normal at the corresponding index
+        for (int i = 0; i < vertexBuffer.capacity()/3; i++) {
+                populateFromBuffer(v, vertexBuffer, i);
+                populateFromBuffer(n, normalBuffer, i);
+                
+                //on left or right border, the set x comp of normal to 0
+                if(FastMath.abs(v.x+borderDistance) <=borderTolerance) n.x = 0f;
+                else if(FastMath.abs(-v.x+borderDistance) <=borderTolerance) n.x = 0f;
+                //on top or bottom border, the set z comp of normal to 0
+                if(FastMath.abs(v.z+borderDistance) <=borderTolerance) n.z = 0f;
+                else if(FastMath.abs(-v.z+borderDistance) <=borderTolerance) n.z = 0f;
+                
+                n.normalizeLocal();
+                normals.put(n.x);
+                normals.put(n.y);
+                normals.put(n.z);
+        }
+        mesh.clearBuffer(Type.Normal);
+        mesh.setBuffer(Type.Normal, 3, normals);
+    }
+    //TR CODE END
 }
Index: src/core/com/jme3/animation/AnimationProvider.java
===================================================================
--- src/core/com/jme3/animation/AnimationProvider.java	(revision 0)
+++ src/core/com/jme3/animation/AnimationProvider.java	(revision 0)
@@ -0,0 +1,32 @@
+package com.jme3.animation;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.HashMap;
+
+import com.jme3.export.JmeExporter;
+import com.jme3.export.JmeImporter;
+import com.jme3.export.Savable;
+
+public abstract class AnimationProvider implements Savable {
+
+	public AnimationProvider() {
+	}
+
+	public abstract void setAnimations(HashMap<String, Animation> animations);
+
+	public abstract Animation getAnimation(String name, AnimControl animControl);
+	
+	public abstract float getAnimationLength(String name);
+
+	public abstract void removeAnimation(String name);
+
+	public abstract void addAnimation(Animation anim);
+
+	public abstract Collection<String> getAnimationNames();
+
+	public abstract void write(JmeExporter ex) throws IOException;
+	
+	public abstract void read(JmeImporter im) throws IOException;
+
+}
\ No newline at end of file
Index: src/core/com/jme3/animation/BoneTrack.java
===================================================================
--- src/core/com/jme3/animation/BoneTrack.java	(revision 9330)
+++ src/core/com/jme3/animation/BoneTrack.java	(working copy)
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2010 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -48,8 +48,11 @@
     /**
      * Bone index in the skeleton which this track effects.
      */
-    private int targetBoneIndex;
-    
+    private int targetBoneIndex = -1;
+    /**
+     * Bone name in the skeleton which this track affects.
+     */
+    private String targetBoneName;
     /**
      * Transforms and times for track.
      */
@@ -97,6 +100,21 @@
         this.targetBoneIndex = targetBoneIndex;
     }
 
+    public BoneTrack(String boneName) {
+		this.targetBoneName = boneName;
+	}
+    
+    /**
+     * @return Target bone for this bonetrack
+     */
+    public String getTargetBoneName() {
+		return targetBoneName;
+	}
+    	
+	public void setTargetBoneIndex(int index) {
+        targetBoneIndex = index;
+    }
+
     /**
      * @return the bone index of this bone track.
      */
@@ -182,10 +200,8 @@
      * The transforms can be interpolated in some method from the keyframes.
      *
      * @param time the current time of the animation
+     * @param skeleton the skeleton to which the bone belong
      * @param weight the weight of the animation
-     * @param control
-     * @param channel
-     * @param vars
      */
     public void setTime(float time, float weight, AnimControl control, AnimChannel channel, TempVars vars) {
         BitSet affectedBones = channel.getAffectedBones();
@@ -286,7 +302,8 @@
     @Override
     public void write(JmeExporter ex) throws IOException {
         OutputCapsule oc = ex.getCapsule(this);
-        oc.write(targetBoneIndex, "boneIndex", 0);
+        oc.write(targetBoneIndex, "boneIndex", -1);
+        oc.write(targetBoneName, "boneName", null);
         oc.write(translations, "translations", null);
         oc.write(rotations, "rotations", null);
         oc.write(times, "times", null);
@@ -296,7 +313,8 @@
     @Override
     public void read(JmeImporter im) throws IOException {
         InputCapsule ic = im.getCapsule(this);
-        targetBoneIndex = ic.readInt("boneIndex", 0);
+        targetBoneIndex = ic.readInt("boneIndex", -1);
+        targetBoneName = ic.readString("boneName", null);
 
         translations = (CompactVector3Array) ic.readSavable("translations", null);
         rotations = (CompactQuaternionArray) ic.readSavable("rotations", null);
Index: src/core/com/jme3/animation/Animation.java
===================================================================
--- src/core/com/jme3/animation/Animation.java	(revision 9330)
+++ src/core/com/jme3/animation/Animation.java	(working copy)
@@ -107,6 +107,37 @@
         for (int i = 0; i < tracks.length; i++){
             tracks[i].setTime(time, blendAmount, control, channel, vars);
         }
+        
+        /*
+        if (tracks != null && tracks.length > 0) {
+            Track<?> trackInstance = tracks[0];
+            
+            if (trackInstance instanceof SpatialTrack) {
+                Spatial spatial = control.getSpatial();
+                if (spatial != null) {
+                    ((SpatialTrack) tracks[0]).setTime(time, spatial, blendAmount);
+                }
+            } else if (trackInstance instanceof BoneTrack) {
+                BitSet affectedBones = channel.getAffectedBones();
+                Skeleton skeleton = control.getSkeleton();
+                for (int i = 0; i < tracks.length; ++i) {
+                    if (affectedBones == null || affectedBones.get(((BoneTrack) tracks[i]).getTargetIndex())) {
+                        ((BoneTrack) tracks[i]).setTime(time, skeleton, blendAmount);
+                    }
+                }
+            } else if (trackInstance instanceof PoseTrack) {
+                Spatial spatial = control.getSpatial();
+                List<Mesh> meshes = new ArrayList<Mesh>();
+                this.getMeshes(spatial, meshes);
+                if (meshes.size() > 0) {
+                    Mesh[] targets = meshes.toArray(new Mesh[meshes.size()]);
+                    for (int i = 0; i < tracks.length; ++i) {
+                        ((PoseTrack) tracks[i]).setTime(time, targets, blendAmount);
+                    }
+                }
+            }
+        }
+        */
     }
     
     /**
@@ -177,4 +208,26 @@
             System.arraycopy(arr, 0, tracks, 0, arr.length);
         }
     }
+    
+    
+    /**
+     * BoneTracks without a bone index but a bone name can be
+     * bound to the specified bone index. This can be used for
+     * loading animation tracks only and being able to play them
+     * on any bone or any skeleton, as long as the bone name does
+     * match
+     */
+    public void rewireBoneTracks(Skeleton skeleton) {
+		if(tracks != null){
+			for(Track tr : tracks){
+				if(tr instanceof BoneTrack){
+					BoneTrack bt = (BoneTrack) tr;
+				if(bt.getTargetBoneIndex() < 0)
+					bt.setTargetBoneIndex(skeleton.getBoneIndex(bt.getTargetBoneName()));
+				else
+					return;
+				}
+			}
+		}
+	}
 }
Index: src/core/com/jme3/animation/AnimChannel.java
===================================================================
--- src/core/com/jme3/animation/AnimChannel.java	(revision 9330)
+++ src/core/com/jme3/animation/AnimChannel.java	(working copy)
@@ -233,7 +233,7 @@
         if (blendTime < 0f)
             throw new IllegalArgumentException("blendTime cannot be less than zero");
 
-        Animation anim = control.animationMap.get(name);
+        Animation anim = control.getAnim(name);
         if (anim == null)
             throw new IllegalArgumentException("Cannot find animation named: '"+name+"'");
 
Index: src/core/com/jme3/animation/AnimControl.java
===================================================================
--- src/core/com/jme3/animation/AnimControl.java	(revision 9330)
+++ src/core/com/jme3/animation/AnimControl.java	(working copy)
@@ -74,9 +74,10 @@
     @Deprecated
     private SkeletonControl skeletonControl;
     /**
-     * List of animations
+     * An Animationprovider
      */
-    HashMap<String, Animation> animationMap;
+    private AnimationProvider animationProvider = new HashMapAnimationProvider();
+
     /**
      * Animation channels
      */
@@ -103,6 +104,10 @@
      */
     public AnimControl() {
     }
+    
+    public void setAnimationProvider(AnimationProvider pro){
+    	this.animationProvider = pro;
+    }
 
     /**
      * Internal use only.
@@ -133,7 +138,7 @@
      * with the skeleton given in the constructor.
      */
     public void setAnimations(HashMap<String, Animation> animations) {
-        animationMap = animations;
+    	animationProvider.setAnimations(animations);
     }
 
     /**
@@ -143,10 +148,7 @@
      * such named animation exists.
      */
     public Animation getAnim(String name) {
-        if (animationMap == null) {
-            animationMap = new HashMap<String, Animation>();
-        }
-        return animationMap.get(name);
+        return animationProvider.getAnimation(name, this);
     }
 
     /**
@@ -155,10 +157,7 @@
      * @param anim The animation to add.
      */
     public void addAnim(Animation anim) {
-        if (animationMap == null) {
-            animationMap = new HashMap<String, Animation>();
-        }
-        animationMap.put(anim.getName(), anim);
+       animationProvider.addAnimation(anim);
     }
 
     /**
@@ -166,12 +165,7 @@
      * @param anim The animation to remove.
      */
     public void removeAnim(Animation anim) {
-        if (!animationMap.containsKey(anim.getName())) {
-            throw new IllegalArgumentException("Given animation does not exist "
-                    + "in this AnimControl");
-        }
-
-        animationMap.remove(anim.getName());
+        animationProvider.removeAnimation(anim.getName());
     }
 
     /**
@@ -298,7 +292,7 @@
      * can play.
      */
     public Collection<String> getAnimationNames() {
-        return animationMap.keySet();
+        return animationProvider.getAnimationNames();
     }
 
     /**
@@ -307,13 +301,7 @@
      * @return The length of time, in seconds, of the named animation.
      */
     public float getAnimationLength(String name) {
-        Animation a = animationMap.get(name);
-        if (a == null) {
-            throw new IllegalArgumentException("The animation " + name
-                    + " does not exist in this AnimControl");
-        }
-
-        return a.getLength();
+        return animationProvider.getAnimationLength(name);
     }
 
     /**
@@ -348,7 +336,7 @@
         super.write(ex);
         OutputCapsule oc = ex.getCapsule(this);
         oc.write(skeleton, "skeleton", null);
-        oc.writeStringSavableMap(animationMap, "animations", null);
+        oc.write(animationProvider, "animationProvider", null);
     }
 
     @Override
@@ -356,7 +344,7 @@
         super.read(im);
         InputCapsule in = im.getCapsule(this);
         skeleton = (Skeleton) in.readSavable("skeleton", null);
-        animationMap = (HashMap<String, Animation>) in.readStringSavableMap("animations", null);
+        animationProvider = (AnimationProvider) in.readSavable("animationProvider", null);
 
         if (im.getFormatVersion() == 0) {
             // Changed for backward compatibility with j3o files generated 
Index: src/core/com/jme3/animation/HashMapAnimationProvider.java
===================================================================
--- src/core/com/jme3/animation/HashMapAnimationProvider.java	(revision 0)
+++ src/core/com/jme3/animation/HashMapAnimationProvider.java	(revision 0)
@@ -0,0 +1,86 @@
+package com.jme3.animation;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.HashMap;
+
+import com.jme3.export.InputCapsule;
+import com.jme3.export.JmeExporter;
+import com.jme3.export.JmeImporter;
+import com.jme3.export.OutputCapsule;
+
+/**
+ * An AnimationProvider based on a hasmap of animations
+ * 
+ */
+public class HashMapAnimationProvider extends AnimationProvider {
+
+	/**
+	 * List of animations
+	 */
+	protected HashMap<String, Animation> animationMap = new HashMap<String, Animation>();
+
+	/**
+	 * Sets the animations to the provided map of animation names to boneanimations
+	 */
+	public void setAnimations(HashMap<String, Animation> animations) {
+		this.animationMap = animations;
+	}
+
+	/**
+	 * Returns the animation requested by name or null if the animation does not exist
+	 */
+	public Animation getAnimation(String name, AnimControl control) {
+		return this.animationMap.get(name);
+	}
+
+	/**
+	 * Removes the specified animation specified by name or throws an IllegalStateException if the animation does not exisit in this provider
+	 */
+	public void removeAnimation(String name) {
+		if (!animationMap.containsKey(name)) {
+			throw new IllegalArgumentException(
+					"Given animation does not exist " + "in this AnimControl");
+		}
+
+		animationMap.remove(name);
+	}
+
+	/**
+	 * Adds an animation to the hash map
+	 */
+	public void addAnimation(Animation anim) {
+		animationMap.put(anim.getName(), anim);
+	}
+
+	/**
+	 * Returns a collection of the currently present animationnames
+	 */
+	public Collection<String> getAnimationNames() {
+		return animationMap.keySet();
+	}
+
+	/**
+	 * Returns the length of the given animation identified by name or throws an IllegalStateException if that animation is not present
+	 */
+	public float getAnimationLength(String name) {
+		Animation a = animationMap.get(name);
+		if (a == null) {
+			throw new IllegalArgumentException("The animation " + name
+					+ " does not exist in this AnimControl");
+		}
+
+		return a.getLength();
+	}
+
+	public void write(JmeExporter ex) throws IOException {
+		OutputCapsule oc = ex.getCapsule(this);
+		oc.writeStringSavableMap(animationMap, "animations", null);
+	}
+
+	public void read(JmeImporter im) throws IOException {
+		InputCapsule in = im.getCapsule(this);
+		animationMap = (HashMap<String, Animation>) in
+				.readStringSavableMap("animations", null);
+	}
+}
Index: src/core/com/jme3/asset/DesktopAssetManager.java
===================================================================
--- src/core/com/jme3/asset/DesktopAssetManager.java	(revision 9330)
+++ src/core/com/jme3/asset/DesktopAssetManager.java	(working copy)
@@ -313,11 +313,12 @@
         // create an instance for user
         T clone = (T) obj;
         if (clone instanceof CloneableSmartAsset){
-            if (proc == null){
-                throw new IllegalStateException("Asset implements "
-                        + "CloneableSmartAsset but doesn't "
-                        + "have processor to handle cloning");
-            }else{
+            if (proc != null){
+//            if (proc == null){
+//                throw new IllegalStateException("Asset implements "
+//                        + "CloneableSmartAsset but doesn't "
+//                        + "have processor to handle cloning");
+//            }else{
                 clone = (T) proc.createClone(obj);
                 if (cache != null && clone != obj){
                     cache.registerAssetClone(key, clone);
